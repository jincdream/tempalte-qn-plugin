{"version":3,"file":"index.umd.min.js","sources":["../../node_modules/_ts-brand-json@0.1.1@ts-brand-json/index.js","../../src/index.ts"],"sourcesContent":["exports.JSON = JSON;\n","/**\n * JSON type\n * https://github.com/microsoft/TypeScript/issues/27930\n */\nimport { JSON, json } from 'ts-brand-json'\ntype Types<T, D> = { [type in keyof T]: Trigger<T, D> }\ntype Trigger<T, D> = (param: { target: string; data: D }) => T[keyof T]\nexport default class ActionCore<AllTypes> {\n  private handles: Types<AllTypes, {}> = {} as Types<AllTypes, {}>\n  install<D>(type: keyof AllTypes, actionTrigger: Trigger<AllTypes, D>) {\n    Object.defineProperty(this.handles, type, {\n      value: actionTrigger,\n    })\n  }\n  uninstall(type: keyof AllTypes) {\n    Object.defineProperty(this.handles, type, {\n      value: void 0,\n    })\n    delete this.handles[type]\n  }\n  async run<\n    Param extends { [key: string]: any },\n    Reseponse extends AllTypes[keyof AllTypes] = AllTypes[keyof AllTypes]\n  >(action: {\n    type: keyof AllTypes\n    target: string\n    param?: json<Param>\n    data?: Param\n    [key: string]: any\n  }): Promise<Reseponse> {\n    let { type, param, data, target, ...option } = action\n    let handle = this.handles[type]\n    let paramData: Param = {} as Param\n    if (param) {\n      try {\n        paramData = JSON.parse<Param>(param)\n      } catch (error) {\n        console.error(\n          `[Action-Core Error]: action param parse error â†“\\n`,\n          error\n        )\n      }\n    }\n    let [_target, urlParams = ''] = target.split('?')\n    let urlData: { [key: string]: any } = {}\n    urlParams.split('&').map((v) => {\n      let [key, value] = v.split('=')\n      urlData[key] = value\n    })\n\n    return handle({\n      target: _target,\n      data: { ...paramData, ...data, ...option, ...urlData },\n    }) as Reseponse\n  }\n}\n"],"names":["JSON","this","ActionCore","type","actionTrigger","Object","defineProperty","handles","value","action","param","data","target","option","handle","paramData","parse","error","console","_a","split","_target","_b","urlData","map","v","key"],"mappings":"kOAAA,MAAeA,KCOf,aACUC,aAA+B,UACvCC,oBAAA,SAAWC,EAAsBC,GAC/BC,OAAOC,eAAeL,KAAKM,QAASJ,EAAM,CACxCK,MAAOJ,KAGXF,sBAAA,SAAUC,GACRE,OAAOC,eAAeL,KAAKM,QAASJ,EAAM,CACxCK,WAAO,WAEFP,KAAKM,QAAQJ,IAEhBD,gBAAN,SAGEO,oHAUA,GAHMN,EAAyCM,OAAnCC,EAAmCD,QAA5BE,EAA4BF,OAAtBG,EAAsBH,SAAXI,WAAWJ,EAA3C,kCACAK,EAASb,KAAKM,QAAQJ,GACtBY,EAAmB,GACnBL,EACF,IACEK,EAAYf,EAAKgB,MAAaN,GAC9B,MAAOO,GACPC,QAAQD,MACN,oDACAA,GAWN,OAPIE,EAA4BP,EAAOQ,MAAM,KAAxCC,OAASC,OACVC,EAAkC,eADZ,MAEhBH,MAAM,KAAKI,IAAI,SAACC,GACpB,IAAAN,EAAeM,EAAEL,MAAM,KAAtBM,OAAKlB,OACVe,EAAQG,GAAOlB,OAGVM,EAAO,CACZF,OAAQS,EACRV,oDAAWI,GAAcJ,GAASE,GAAWU"}