(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('tslib')) :
    typeof define === 'function' && define.amd ? define(['tslib'], factory) :
    (global = global || self, global.ActionCore = factory(global.tslib));
}(this, function (tslib) { 'use strict';

    var JSON_1 = JSON;

    var ActionCore = /** @class */ (function () {
        function ActionCore() {
            this.handles = {};
        }
        ActionCore.prototype.install = function (type, actionTrigger) {
            Object.defineProperty(this.handles, type, {
                value: actionTrigger,
            });
        };
        ActionCore.prototype.uninstall = function (type) {
            Object.defineProperty(this.handles, type, {
                value: void 0,
            });
            delete this.handles[type];
        };
        ActionCore.prototype.run = function (action) {
            return tslib.__awaiter(this, void 0, void 0, function () {
                var type, param, data, target, option, handle, paramData, _a, _target, _b, urlParams, urlData;
                return tslib.__generator(this, function (_c) {
                    type = action.type, param = action.param, data = action.data, target = action.target, option = tslib.__rest(action, ["type", "param", "data", "target"]);
                    handle = this.handles[type];
                    paramData = {};
                    if (param) {
                        try {
                            paramData = JSON_1.parse(param);
                        }
                        catch (error) {
                            console.error("[Action-Core Error]: action param parse error \u2193\n", error);
                        }
                    }
                    _a = target.split('?'), _target = _a[0], _b = _a[1], urlParams = _b === void 0 ? '' : _b;
                    urlData = {};
                    urlParams.split('&').map(function (v) {
                        var _a = v.split('='), key = _a[0], value = _a[1];
                        urlData[key] = value;
                    });
                    return [2 /*return*/, handle({
                            target: _target,
                            data: tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({}, paramData), data), option), urlData),
                        })];
                });
            });
        };
        return ActionCore;
    }());

    return ActionCore;

}));
//# sourceMappingURL=index.umd.js.map
